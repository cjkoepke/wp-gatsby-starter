{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/xml.js"],"names":["module","exports","hljs","TAG_INTERNALS","endsWithParent","illegal","relevance","contains","className","begin","endsParent","variants","end","aliases","case_insensitive","COMMENT","subLanguage","skip","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","keywords","name","starts","returnEnd"],"mappings":"8EAAAA,EAAOC,QAAU,SAAUC,GACzB,IACIC,EAAgB,CAClBC,gBAAgB,EAChBC,QAAS,IACTC,UAAW,EACXC,SAAU,CAAC,CACTC,UAAW,OACXC,MAPe,qBAQfH,UAAW,GACV,CACDG,MAAO,OACPH,UAAW,EACXC,SAAU,CAAC,CACTC,UAAW,SACXE,YAAY,EACZC,SAAU,CAAC,CACTF,MAAO,IACPG,IAAK,KACJ,CACDH,MAAO,IACPG,IAAK,KACJ,CACDH,MAAO,sBAKf,MAAO,CACLI,QAAS,CAAC,OAAQ,QAAS,MAAO,OAAQ,MAAO,MAAO,MAAO,QAAS,OACxEC,kBAAkB,EAClBP,SAAU,CAAC,CACTC,UAAW,OACXC,MAAO,YACPG,IAAK,IACLN,UAAW,GACXC,SAAU,CAAC,CACTE,MAAO,MACPG,IAAK,SAENV,EAAKa,QAAQ,UAAQ,SAAO,CAC7BT,UAAW,KACT,CACFG,MAAO,kBACPG,IAAK,UACLN,UAAW,IACV,CACDE,UAAW,OACXC,MAAO,SACPG,IAAK,MACLN,UAAW,IACV,CACDG,MAAO,YACPG,IAAK,MACLI,YAAa,MACbT,SAAU,CAEV,CACEE,MAAO,OACPG,IAAK,OACLK,MAAM,GACL,CACDR,MAAO,KACPG,IAAK,IACLK,MAAM,GACL,CACDR,MAAO,KACPG,IAAK,IACLK,MAAM,GACLf,EAAKgB,QAAQhB,EAAKiB,iBAAkB,CACrCd,QAAS,KACTG,UAAW,KACXD,SAAU,KACVU,MAAM,IACJf,EAAKgB,QAAQhB,EAAKkB,kBAAmB,CACvCf,QAAS,KACTG,UAAW,KACXD,SAAU,KACVU,MAAM,MAEP,CACDT,UAAW,MAQXC,MAAO,oBACPG,IAAK,IACLS,SAAU,CACRC,KAAM,SAERf,SAAU,CAACJ,GACXoB,OAAQ,CACNX,IAAK,WACLY,WAAW,EACXR,YAAa,CAAC,MAAO,SAEtB,CACDR,UAAW,MAEXC,MAAO,qBACPG,IAAK,IACLS,SAAU,CACRC,KAAM,UAERf,SAAU,CAACJ,GACXoB,OAAQ,CACNX,IAAK,aACLY,WAAW,EACXR,YAAa,CAAC,eAAgB,aAAc,aAAc,MAAO,cAElE,CACDR,UAAW,MACXC,MAAO,MACPG,IAAK,MACLL,SAAU,CAAC,CACTC,UAAW,OACXC,MAAO,aACPH,UAAW,GACVH","file":"react-syntax-highlighter_languages_highlight_xml-424611cb29fe646f0b59.js","sourcesContent":["module.exports = function (hljs) {\n  var XML_IDENT_RE = '[A-Za-z0-9\\\\._:-]+';\n  var TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [{\n      className: 'attr',\n      begin: XML_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: /=\\s*/,\n      relevance: 0,\n      contains: [{\n        className: 'string',\n        endsParent: true,\n        variants: [{\n          begin: /\"/,\n          end: /\"/\n        }, {\n          begin: /'/,\n          end: /'/\n        }, {\n          begin: /[^\\s\"'=<>`]+/\n        }]\n      }]\n    }]\n  };\n  return {\n    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist', 'wsf'],\n    case_insensitive: true,\n    contains: [{\n      className: 'meta',\n      begin: '<!DOCTYPE',\n      end: '>',\n      relevance: 10,\n      contains: [{\n        begin: '\\\\[',\n        end: '\\\\]'\n      }]\n    }, hljs.COMMENT('<!--', '-->', {\n      relevance: 10\n    }), {\n      begin: '<\\\\!\\\\[CDATA\\\\[',\n      end: '\\\\]\\\\]>',\n      relevance: 10\n    }, {\n      className: 'meta',\n      begin: /<\\?xml/,\n      end: /\\?>/,\n      relevance: 10\n    }, {\n      begin: /<\\?(php)?/,\n      end: /\\?>/,\n      subLanguage: 'php',\n      contains: [// We don't want the php closing tag ?> to close the PHP block when\n      // inside any of the following blocks:\n      {\n        begin: '/\\\\*',\n        end: '\\\\*/',\n        skip: true\n      }, {\n        begin: 'b\"',\n        end: '\"',\n        skip: true\n      }, {\n        begin: 'b\\'',\n        end: '\\'',\n        skip: true\n      }, hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null,\n        className: null,\n        contains: null,\n        skip: true\n      }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null,\n        className: null,\n        contains: null,\n        skip: true\n      })]\n    }, {\n      className: 'tag',\n\n      /*\n      The lookahead pattern (?=...) ensures that 'begin' only matches\n      '<style' as a single word, followed by a whitespace or an\n      ending braket. The '$' is needed for the lexeme to be recognized\n      by hljs.subMode() that tests lexemes outside the stream.\n      */\n      begin: '<style(?=\\\\s|>|$)',\n      end: '>',\n      keywords: {\n        name: 'style'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: '</style>',\n        returnEnd: true,\n        subLanguage: ['css', 'xml']\n      }\n    }, {\n      className: 'tag',\n      // See the comment in the <style tag about the lookahead pattern\n      begin: '<script(?=\\\\s|>|$)',\n      end: '>',\n      keywords: {\n        name: 'script'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: '\\<\\/script\\>',\n        returnEnd: true,\n        subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml', 'vbscript']\n      }\n    }, {\n      className: 'tag',\n      begin: '</?',\n      end: '/?>',\n      contains: [{\n        className: 'name',\n        begin: /[^\\/><\\s]+/,\n        relevance: 0\n      }, TAG_INTERNALS]\n    }]\n  };\n};"],"sourceRoot":""}