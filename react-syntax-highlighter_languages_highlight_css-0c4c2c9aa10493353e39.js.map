{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/css.js"],"names":["module","exports","hljs","RULE","begin","returnBegin","end","endsWithParent","contains","className","excludeEnd","starts","APOS_STRING_MODE","QUOTE_STRING_MODE","CSS_NUMBER_MODE","C_BLOCK_COMMENT_MODE","case_insensitive","illegal","lexemes","keywords","relevance"],"mappings":"+EAAAA,EAAOC,QAAU,SAAUC,GACzB,IACIC,EAAO,CACTC,MAAO,wCACPC,aAAa,EACbC,IAAK,IACLC,gBAAgB,EAChBC,SAAU,CAAC,CACTC,UAAW,YACXL,MAAO,KACPE,IAAK,IACLI,YAAY,EACZC,OAAQ,CACNJ,gBAAgB,EAChBG,YAAY,EACZF,SAAU,CAAC,CACTJ,MAAO,WACPC,aAAa,EACbG,SAAU,CAAC,CACTC,UAAW,WACXL,MAAO,UACN,CACDA,MAAO,KACPE,IAAK,KACLE,SAAU,CAACN,EAAKU,iBAAkBV,EAAKW,sBAExCX,EAAKY,gBAAiBZ,EAAKW,kBAAmBX,EAAKU,iBAAkBV,EAAKa,qBAAsB,CACjGN,UAAW,SACXL,MAAO,iBACN,CACDK,UAAW,OACXL,MAAO,mBAKf,MAAO,CACLY,kBAAkB,EAClBC,QAAS,YACTT,SAAU,CAACN,EAAKa,qBAAsB,CACpCN,UAAW,cACXL,MAAO,mBACN,CACDK,UAAW,iBACXL,MAAO,oBACN,CACDK,UAAW,gBACXL,MAAO,KACPE,IAAK,KACLW,QAAS,KACR,CACDR,UAAW,kBACXL,MAAO,kCACN,CACDA,MAAO,oBACPc,QAAS,UACTC,SAAU,kBACT,CACDf,MAAO,IACPE,IAAK,OAKLW,QAAS,IAETT,SAAU,CAAC,CACTC,UAAW,UACXL,MAAO,OACN,CACDA,MAAO,KACPG,gBAAgB,EAChBG,YAAY,EACZU,UAAW,EACXZ,SAAU,CAACN,EAAKU,iBAAkBV,EAAKW,kBAAmBX,EAAKY,oBAEhE,CACDL,UAAW,eACXL,MA7EW,0BA8EXgB,UAAW,GACV,CACDhB,MAAO,IACPE,IAAK,IACLW,QAAS,KACTT,SAAU,CAACN,EAAKa,qBAAsBZ","file":"react-syntax-highlighter_languages_highlight_css-0c4c2c9aa10493353e39.js","sourcesContent":["module.exports = function (hljs) {\n  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';\n  var RULE = {\n    begin: /(?:[A-Z\\_\\.\\-]+|--[a-zA-Z0-9_-]+)\\s*:/,\n    returnBegin: true,\n    end: ';',\n    endsWithParent: true,\n    contains: [{\n      className: 'attribute',\n      begin: /\\S/,\n      end: ':',\n      excludeEnd: true,\n      starts: {\n        endsWithParent: true,\n        excludeEnd: true,\n        contains: [{\n          begin: /[\\w-]+\\(/,\n          returnBegin: true,\n          contains: [{\n            className: 'built_in',\n            begin: /[\\w-]+/\n          }, {\n            begin: /\\(/,\n            end: /\\)/,\n            contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]\n          }]\n        }, hljs.CSS_NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_BLOCK_COMMENT_MODE, {\n          className: 'number',\n          begin: '#[0-9A-Fa-f]+'\n        }, {\n          className: 'meta',\n          begin: '!important'\n        }]\n      }\n    }]\n  };\n  return {\n    case_insensitive: true,\n    illegal: /[=\\/|'\\$]/,\n    contains: [hljs.C_BLOCK_COMMENT_MODE, {\n      className: 'selector-id',\n      begin: /#[A-Za-z0-9_-]+/\n    }, {\n      className: 'selector-class',\n      begin: /\\.[A-Za-z0-9_-]+/\n    }, {\n      className: 'selector-attr',\n      begin: /\\[/,\n      end: /\\]/,\n      illegal: '$'\n    }, {\n      className: 'selector-pseudo',\n      begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/\n    }, {\n      begin: '@(font-face|page)',\n      lexemes: '[a-z-]+',\n      keywords: 'font-face page'\n    }, {\n      begin: '@',\n      end: '[{;]',\n      // at_rule eating first \"{\" is a good thing\n      // because it doesnâ€™t let it to be parsed as\n      // a rule set but instead drops parser into\n      // the default mode which is how it should be.\n      illegal: /:/,\n      // break on Less variables @var: ...\n      contains: [{\n        className: 'keyword',\n        begin: /\\w+/\n      }, {\n        begin: /\\s/,\n        endsWithParent: true,\n        excludeEnd: true,\n        relevance: 0,\n        contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.CSS_NUMBER_MODE]\n      }]\n    }, {\n      className: 'selector-tag',\n      begin: IDENT_RE,\n      relevance: 0\n    }, {\n      begin: '{',\n      end: '}',\n      illegal: /\\S/,\n      contains: [hljs.C_BLOCK_COMMENT_MODE, RULE]\n    }]\n  };\n};"],"sourceRoot":""}